@startuml
 participant "JSP\nJSPEnrolStudentInWrittenEvaluation" as JSPEnrolStudentInWrittenEvaluation order 0
 participant "services.student\nEnrolStudentInWrittenEvaluation" as EnrolStudentInWrittenEvaluation order 1
 participant "domain\nAttends" as Attends order 25
 participant "service\nServiceMonitoring" as ServiceMonitoring order 30
 participant "core.security\nAuthenticate" as Authenticate order 35
 participant "core.domain\nAuthenticationContext" as AuthenticationContext order 38
 participant "core.domain\nUser" as User order 39
 participant "pt.ist.fenixframework\nFenixFramework" as FenixFramework order 44
 participant "domain\nPerson" as Person order 47
 participant "domain\nPerson_Base" as Person_Base order 48
 participant "domain\nEvaluation_Base" as Evaluation_Base order 49
 participant "domain\nWrittenEvaluationEnrolment" as WrittenEvaluationEnrolment order 52
 participant "core.domain\nBennu" as Bennu order 65
 participant "pt.ist.fenixframework\nDomainRoot" as DomainRoot order 76
 participant "pt.ist.fenixframework\nDomainRoot" as DomainRoot order 77
 JSPEnrolStudentInWrittenEvaluation -> EnrolStudentInWrittenEvaluation: getConnection()
 JSPEnrolStudentInWrittenEvaluation <- EnrolStudentInWrittenEvaluation: returnConnection()
 JSPEnrolStudentInWrittenEvaluation -> EnrolStudentInWrittenEvaluation: executeAction()
 EnrolStudentInWrittenEvaluation -> EnrolStudentInWrittenEvaluation: runEnrolStudentInWrittenEvaluation(String,String):void
 EnrolStudentInWrittenEvaluation -> EnrolStudentInWrittenEvaluation: run(String,String):void
 EnrolStudentInWrittenEvaluation -> ServiceMonitoring: logService(Class<?>,Object[]):void
 ServiceMonitoring -> Authenticate: getUser():User
 ALT ?
 ELSE else
 	Authenticate -> AuthenticationContext: getUser():User
 END
 ServiceMonitoring -> User: getUsername():String
 User -> User: getUsername():String
 User -> User: getUsername():String
 EnrolStudentInWrittenEvaluation -> FenixFramework: getDomainObject(String):T
 EnrolStudentInWrittenEvaluation -> Person: readPersonByUsername(String):Person
 EnrolStudentInWrittenEvaluation -> Person_Base: getStudent():Student
 EnrolStudentInWrittenEvaluation -> EnrolStudentInWrittenEvaluation: findCorrectRegistration\n(Student,Set<ExecutionCourse>):Registration
 LOOP for: student.getRegistrationsSet()
 	OPT registration.isActive()
 		LOOP for: registration.getAssociatedAttendsSet()
 			EnrolStudentInWrittenEvaluation -> Attends: getExecutionCourse():ExecutionCourse
 			Attends -> Attends: getDisciplinaExecucao():ExecutionCourse
 			Attends -> Attends: getExecutionCourse():ExecutionCourse
 		END
 	END
 END
 EnrolStudentInWrittenEvaluation -> Evaluation_Base: getAssociatedExecutionCoursesSet():Set<ExecutionCourse>
 EnrolStudentInWrittenEvaluation -> EnrolStudentInWrittenEvaluation: enrolmentAction(WrittenEvaluation,Registration):void
 EnrolStudentInWrittenEvaluation -> Evaluation_Base: enrolStudent(Registration):void
 Evaluation_Base -> WrittenEvaluationEnrolment: WrittenEvaluationEnrolment(WrittenEvaluation,Registration)
 WrittenEvaluationEnrolment -> WrittenEvaluationEnrolment: WrittenEvaluationEnrolment()
 WrittenEvaluationEnrolment -> WrittenEvaluationEnrolment: WrittenEvaluationEnrolment_Base()
 WrittenEvaluationEnrolment -> WrittenEvaluationEnrolment: setRootDomainObject(Bennu):void
 WrittenEvaluationEnrolment -> Bennu: getInstance():Bennu
 OPT ?
 	Bennu -> Bennu: initialize():Bennu
 	OPT ?
 		Bennu -> Bennu: Bennu()
 	END
 	Bennu -> FenixFramework: getDomainRoot():DomainRoot
 	Bennu -> DomainRoot: getBennu():Bennu
 END
 Bennu -> FenixFramework: getDomainRoot():DomainRoot
 Bennu -> DomainRoot: getBennu():Bennu
 WrittenEvaluationEnrolment -> WrittenEvaluationEnrolment: setWrittenEvaluation(WrittenEvaluation):void
 WrittenEvaluationEnrolment -> WrittenEvaluationEnrolment: setStudent(Registration):void
 @enduml