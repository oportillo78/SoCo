@startuml
 participant "JSP\nJSPPostingRulesManager" as JSPPostingRulesManager order 0
 participant "services.accounting\nPostingRulesManager" as PostingRulesManager order 1
 participant "domain.accounting\nPostingRule" as PostingRule order 11
 participant "domain.exceptions\nDomainException" as DomainException order 24
 participant "domain.accounting\nPaymentPlan" as PaymentPlan order 25
 participant "domain.accounting\nInstallment" as Installment order 36
 JSPPostingRulesManager -> PostingRulesManager: getConnection()
 JSPPostingRulesManager <- PostingRulesManager: returnConnection()
 JSPPostingRulesManager -> PostingRulesManager: executeAction()
 PostingRulesManager -> PostingRulesManager: deleteDEAPostingRule(PostingRule):void
 LOOP for: postingRule.getServiceAgreementTemplate().getPaymentPlansSet()
 	PostingRulesManager -> PaymentPlan: delete():void
 	LOOP while: !getInstallmentsSet().isEmpty()
 		PaymentPlan -> PaymentPlan: getInstallmentsSet():Set<Installment>
 		PaymentPlan -> Installment: delete():void
 		Installment -> Installment: setPaymentPlan(PaymentPlan):void
 		Installment -> Installment: setRootDomainObject(Bennu):void
 		Installment -> Installment: deleteDomainObject():void
 	END
 	PaymentPlan -> PaymentPlan: removeParameters():void
 	PaymentPlan -> PaymentPlan: setRootDomainObject(Bennu):void
 	PaymentPlan -> PaymentPlan: deleteDomainObject():void
 END
 PostingRulesManager -> PostingRulesManager: deletePostingRule(PostingRule):void
 PostingRulesManager -> PostingRule: delete():void
 PostingRule -> DomainException: throwWhenDeleteBlocked(Collection<String>):void
 PostingRule -> PostingRule: getDeletionBlockers():Collection<String>
 PostingRule -> PostingRule: setServiceAgreementTemplate(ServiceAgreementTemplate):void
 PostingRule -> PostingRule: setRootDomainObject(Bennu):void
 PostingRule -> PostingRule: removeOtherRelations():void
 PostingRule -> PostingRule: deleteDomainObject():void
 @enduml