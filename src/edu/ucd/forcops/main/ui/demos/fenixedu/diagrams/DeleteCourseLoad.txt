@startuml
 participant "JSP\nJSPDeleteCourseLoad" as JSPDeleteCourseLoad order 0
 participant "services.resourceAllocationManager\nDeleteCourseLoad" as DeleteCourseLoad order 1
 participant "predicate\nAccessControl" as AccessControl order 15
 participant "core.security\nAuthenticate" as Authenticate order 20
 participant "core.domain\nAuthenticationContext" as AuthenticationContext order 23
 participant "core.domain\nUser_Base" as User_Base order 24
 participant "predicate\nAccessControlPredicate" as AccessControlPredicate order 25
 participant "domain\nPerson" as Person order 26
 participant "core.domain\nUser" as User order 31
 participant "domain\nCourseLoad" as CourseLoad order 34
 participant "pt.ist.fenixframework.dml\nDeletionBlockerListener" as DeletionBlockerListener order 51
 participant "domain.exceptions\nDomainException" as DomainException order 52
 JSPDeleteCourseLoad -> DeleteCourseLoad: getConnection()
 JSPDeleteCourseLoad <- DeleteCourseLoad: returnConnection()
 JSPDeleteCourseLoad -> DeleteCourseLoad: executeAction()
 DeleteCourseLoad -> DeleteCourseLoad: run(CourseLoad):void
 DeleteCourseLoad -> DeleteCourseLoad: check(AccessControlPredicate<?>):void
 DeleteCourseLoad -> AccessControl: getPerson():Person
 AccessControl -> Authenticate: getUser():User
 ALT ?
 ELSE else
 	Authenticate -> AuthenticationContext: getUser():User
 END
 ALT userView == null
 ELSE else
 	AccessControl -> User_Base: getPerson():Person
 END
 DeleteCourseLoad -> AccessControlPredicate: evaluate(E):boolean
 OPT !result
 	ALT requester == null
 	ELSE else
 		DeleteCourseLoad -> Person: getUsername():String
 		Person -> Person: getUser():User
 		ALT user == null
 		ELSE else
 			Person -> User: getUsername():String
 			User -> User: getUsername():String
 		END
 	END
 END
 OPT courseLoad != null
 	DeleteCourseLoad -> CourseLoad: delete():void
 	CourseLoad -> DomainException: throwWhenDeleteBlocked(Collection<String>):void
 	CourseLoad -> CourseLoad: getDeletionBlockers():Collection<String>
 	CourseLoad -> CourseLoad: checkForDeletionBlockers(Collection<String>):void
 	LOOP for: ?
 		CourseLoad -> DeletionBlockerListener: getDeletionBlockers(T,Collection<String>):void
 	END
 	CourseLoad -> CourseLoad: setExecutionCourse(ExecutionCourse):void
 	CourseLoad -> CourseLoad: setExecutionCourse(ExecutionCourse):void
 	CourseLoad -> CourseLoad: setRootDomainObject(Bennu):void
 	CourseLoad -> CourseLoad: deleteDomainObject():void
 END
 @enduml