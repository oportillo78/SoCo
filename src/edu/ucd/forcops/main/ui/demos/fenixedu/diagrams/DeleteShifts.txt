@startuml
 participant "JSP\nJSPDeleteShifts" as JSPDeleteShifts order 0
 participant "services.resourceAllocationManager\nDeleteShifts" as DeleteShifts order 1
 participant "predicate\nAccessControl" as AccessControl order 17
 participant "core.security\nAuthenticate" as Authenticate order 23
 participant "core.domain\nAuthenticationContext" as AuthenticationContext order 26
 participant "core.domain\nUser_Base" as User_Base order 27
 participant "predicate\nAccessControlPredicate" as AccessControlPredicate order 28
 participant "domain\nPerson" as Person order 30
 participant "core.domain\nUser" as User order 36
 participant "pt.ist.fenixframework\nFenixFramework" as FenixFramework order 39
 participant "domain\nShift" as Shift order 40
 participant "pt.ist.fenixframework.dml\nDeletionBlockerListener" as DeletionBlockerListener order 72
 participant "pt.ist.fenixframework\nDomainObject" as DomainObject order 73
 participant "domain.exceptions\nDomainException" as DomainException order 74
 participant "domain\nShiftGroupingProperties" as ShiftGroupingProperties order 75
 participant "domain\nExecutionCourse" as ExecutionCourse order 76
 participant "domain\nCourseLoad_Base" as CourseLoad_Base order 91
 participant "domain\nShiftType" as ShiftType order 92
 participant "core.i18n\nBundleUtil" as BundleUtil order 95
 participant "domain\nShift_Base" as Shift_Base order 96
 JSPDeleteShifts -> DeleteShifts: getConnection()
 JSPDeleteShifts <- DeleteShifts: returnConnection()
 JSPDeleteShifts -> DeleteShifts: executeAction()
 DeleteShifts -> DeleteShifts: run(List<String>):void
 DeleteShifts -> DeleteShifts: check(AccessControlPredicate<?>):void
 DeleteShifts -> AccessControl: getPerson():Person
 AccessControl -> Authenticate: getUser():User
 ALT ?
 ELSE else
 	Authenticate -> AuthenticationContext: getUser():User
 END
 ALT userView == null
 ELSE else
 	AccessControl -> User_Base: getPerson():Person
 END
 DeleteShifts -> AccessControlPredicate: evaluate(E):boolean
 OPT !result
 	ALT requester == null
 	ELSE else
 		DeleteShifts -> Person: getUsername():String
 		Person -> Person: getUser():User
 		ALT user == null
 		ELSE else
 			Person -> User: getUsername():String
 			User -> User: getUsername():String
 		END
 	END
 END
 LOOP for: shiftOIDs
 	DeleteShifts -> FenixFramework: getDomainObject(String):T
 	DeleteShifts -> Shift: delete():void
 	Shift -> Shift: check(T,AccessControlPredicate<T>):void
 	Shift -> AccessControl: getPerson():Person
 	Shift -> AccessControlPredicate: evaluate(E):boolean
 	OPT !result
 		ALT requester == null
 		ELSE else
 			Shift -> Person: getUsername():String
 		END
 		Shift -> DomainObject: getExternalId():String
 	END
 	Shift -> DomainException: throwWhenDeleteBlocked(Collection<String>):void
 	Shift -> Shift: getDeletionBlockers():Collection<String>
 	Shift -> Shift: checkForDeletionBlockers(Collection<String>):void
 	LOOP for: ?
 		Shift -> DeletionBlockerListener: getDeletionBlockers(T,Collection<String>):void
 	END
 	Shift -> Shift: getExecutionCourse():ExecutionCourse
 	Shift -> Shift: getAssociatedClassesSet():Set<SchoolClass>
 	Shift -> Shift: getCourseLoadsSet():Set<CourseLoad>
 	OPT getShiftGroupingProperties() != null
 		Shift -> Shift: getShiftGroupingProperties():ShiftGroupingProperties
 		Shift -> ShiftGroupingProperties: delete():void
 	END
 	Shift -> Shift: setRootDomainObject(Bennu):void
 	Shift -> Shift: deleteDomainObject():void
 	Shift -> ExecutionCourse: setShiftNames():void
 	ExecutionCourse -> ExecutionCourse: constructSortedSet\n(Collection<T>,Comparator<? super T>):SortedSet<T>
 	ExecutionCourse -> ExecutionCourse: getAssociatedShifts():Set<Shift>
 	LOOP for: getCourseLoadsSet()
 		ExecutionCourse -> CourseLoad_Base: getShiftsSet():Set<Shift>
 	END
 	LOOP for: shifts
 		ExecutionCourse -> ExecutionCourse: constructShiftName(Shift,int):String
 		LOOP for: shift.getSortedTypes()
 			ExecutionCourse -> ShiftType: getSiglaTipoAula():String
 			ShiftType -> BundleUtil: getString(String,String,String[]):String
 		END
 		ExecutionCourse -> ExecutionCourse: getSigla():String
 		ExecutionCourse -> Shift_Base: setNome(String):void
 	END
 END
 @enduml