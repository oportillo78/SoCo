@startuml
 participant "JSP\nJSPUnEnrollStudentFromShift" as JSPUnEnrollStudentFromShift order 0
 participant "services.enrollment.shift\nUnEnrollStudentFromShift" as UnEnrollStudentFromShift order 1
 participant "service\nServiceMonitoring" as ServiceMonitoring order 15
 participant "core.domain\nUser" as User order 20
 participant "pt.ist.fenixframework\nFenixFramework" as FenixFramework order 21
 participant "domain\nShift_Base" as Shift_Base order 23
 participant "service.filter.enrollment\nClassEnrollmentAuthorizationFilter" as ClassEnrollmentAuthorizationFilter order 24
 participant "domain\nDegreeCurricularPlan" as DegreeCurricularPlan order 69
 participant "service.filter.enrollment.ClassEnrollmentAuthorizationFilter\nCurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan" as CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan order 70
 participant "domain\nEnrolmentPeriod" as EnrolmentPeriod order 73
 participant "domain\nEnrolmentPeriod" as EnrolmentPeriod order 74
 participant "domain\nEnrolmentPeriod" as EnrolmentPeriod order 75
 participant "service.filter.enrollment.ClassEnrollmentAuthorizationFilter\nOutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan" as OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan order 76
 participant "domain\nStudentCurricularPlan_Base" as StudentCurricularPlan_Base order 79
 participant "domain\nDegreeCurricularPlanEquivalencePlan_Base" as DegreeCurricularPlanEquivalencePlan_Base order 80
 participant "core.security\nAuthenticate" as Authenticate order 81
 participant "core.domain\nAuthenticationContext" as AuthenticationContext order 84
 participant "core.domain\nUser" as User order 85
 participant "domain.student\nRegistration" as Registration order 86
 participant "service.filter.enrollment.ClassEnrollmentAuthorizationFilter\nClassEnrollmentCondition" as ClassEnrollmentCondition order 88
 participant "domain\nPerson" as Person order 89
 participant "domain\nExecutionSemester" as ExecutionSemester order 91
 participant "core.domain\nBennu" as Bennu order 96
 participant "pt.ist.fenixframework\nDomainRoot" as DomainRoot order 102
 participant "core.domain\nBennu" as Bennu order 103
 JSPUnEnrollStudentFromShift -> UnEnrollStudentFromShift: getConnection()
 JSPUnEnrollStudentFromShift <- UnEnrollStudentFromShift: returnConnection()
 JSPUnEnrollStudentFromShift -> UnEnrollStudentFromShift: executeAction()
 UnEnrollStudentFromShift -> UnEnrollStudentFromShift: runUnEnrollStudentFromShift(Registration,String):void
 UnEnrollStudentFromShift -> ClassEnrollmentAuthorizationFilter: execute(Registration):void
 ClassEnrollmentAuthorizationFilter -> Authenticate: getUser():User
 ALT ?
 ELSE else
 	Authenticate -> AuthenticationContext: getUser():User
 END
 ClassEnrollmentAuthorizationFilter -> User: getPerson():Person
 OPT RoleType.RESOURCE_ALLOCATION_MANAGER.isMember(person.getUser())
 	ClassEnrollmentAuthorizationFilter -> Registration: getPerson():Person
 END
 LOOP for: conditions
 	ClassEnrollmentAuthorizationFilter -> ClassEnrollmentCondition: verify(Registration):void
 END
 ClassEnrollmentAuthorizationFilter -> Person: getActiveStudentCurricularPlansSortedByDegreeTypeAndDegreeName\n():SortedSet<StudentCurricularPlan>
 LOOP for: getStudentsSet()
 	Person -> Registration: getActiveStudentCurricularPlan():StudentCurricularPlan
 END
 LOOP for: activeStudentCurricularPlans
 	ClassEnrollmentAuthorizationFilter -> ClassEnrollmentAuthorizationFilter: verify\n(StudentCurricularPlan,ExecutionSemester):FenixServiceException
 	ClassEnrollmentAuthorizationFilter -> StudentCurricularPlan_Base: getDegreeCurricularPlan():DegreeCurricularPlan
 	ClassEnrollmentAuthorizationFilter -> ClassEnrollmentAuthorizationFilter: verifyEnrolmentPeriod\n(DegreeCurricularPlan,ExecutionSemester,StudentCurricularPlan):FenixServiceException
 	ALT scp.getRegistration().getRegistrationProtocol().isMobilityAgreement()
 		ClassEnrollmentAuthorizationFilter -> DegreeCurricularPlan: getClassesEnrollmentPeriodMobility\n(ExecutionSemester):Optional<EnrolmentPeriod>
 	ELSE else
 		ClassEnrollmentAuthorizationFilter -> DegreeCurricularPlan: getClassesEnrollmentPeriod\n(ExecutionSemester):Optional<EnrolmentPeriod>
 	END
 	OPT !enrolmentPeriodInClasses.isPresent() || enrolmentPeriodInClasses.get().getStartDateDateTime() == null                || enrolmentPeriodInClasses.get().getEndDateDateTime() == null
 		ClassEnrollmentAuthorizationFilter -> CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan: CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan\n()
 		CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan -> CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan: FenixServiceException(String)
 	END
 	OPT !enrolmentPeriodInClasses.get().isValid()
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getStartDateDateTime():DateTime
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: toString(String):String
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getEndDateDateTime():DateTime
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: toString(String):String
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getExecutionPeriod():ExecutionSemester
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getExecutionYear():ExecutionYear
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getName():String
 		ClassEnrollmentAuthorizationFilter -> OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan: OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan\n(String)
 		OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan -> OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan: FenixServiceException(String,String[])
 	END
 	LOOP for: degreeCurricularPlan.getTargetEquivalencePlansSet()
 		ClassEnrollmentAuthorizationFilter -> DegreeCurricularPlanEquivalencePlan_Base: getDegreeCurricularPlan():DegreeCurricularPlan
 		ClassEnrollmentAuthorizationFilter -> ClassEnrollmentAuthorizationFilter: verifyEnrolmentPeriod\n(DegreeCurricularPlan,ExecutionSemester,StudentCurricularPlan):FenixServiceException
 	END
 	ClassEnrollmentAuthorizationFilter -> ExecutionSemester: readActualExecutionSemester():ExecutionSemester
 	ExecutionSemester -> Bennu: getInstance():Bennu
 	OPT ?
 		Bennu -> Bennu: initialize():Bennu
 	END
 	Bennu -> FenixFramework: getDomainRoot():DomainRoot
 	Bennu -> DomainRoot: getBennu():Bennu
 	ExecutionSemester -> Bennu: getExecutionPeriodsSet():Set<ExecutionSemester>
 END
 UnEnrollStudentFromShift -> UnEnrollStudentFromShift: run(Registration,String):void
 UnEnrollStudentFromShift -> ServiceMonitoring: logService(Class<?>,Object[]):void
 ServiceMonitoring -> Authenticate: getUser():User
 ServiceMonitoring -> User: getUsername():String
 UnEnrollStudentFromShift -> FenixFramework: getDomainObject(String):T
 UnEnrollStudentFromShift -> Shift_Base: removeStudents(Registration):void
 @enduml