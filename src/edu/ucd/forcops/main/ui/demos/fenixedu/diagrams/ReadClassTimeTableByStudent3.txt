@startuml
 participant "JSP\nJSPReadClassTimeTableByStudent" as JSPReadClassTimeTableByStudent order 0
 participant "services.enrollment.shift\nReadClassTimeTableByStudent" as ReadClassTimeTableByStudent order 1
 participant "domain.student\nRegistration" as Registration order 13
 participant "domain\nAttends" as Attends order 18
 participant "dto\nInfoLessonInstanceAggregation" as InfoLessonInstanceAggregation order 27
 participant "domain\nLessonInstance_Base" as LessonInstance_Base order 102
 participant "org.joda.time\nDateTime" as DateTime order 103
 participant "util\nHourMinuteSecond" as HourMinuteSecond order 104
 participant "util\nHourMinuteSecond" as HourMinuteSecond order 105
 participant "domain\nSpace" as Space order 106
 participant "domain\nLessonInstance_Base" as LessonInstance_Base order 107
 participant "org.joda.time\nDateTime" as DateTime order 108
 participant "org.joda.time\nDateMidnight" as DateMidnight order 109
 participant "util\nHourMinuteSecond" as HourMinuteSecond order 110
 participant "util\nHourMinuteSecond" as HourMinuteSecond order 111
 participant "domain\nSpace" as Space order 112
 participant "org.joda.time\nDateMidnight" as DateMidnight order 113
 participant "domain\nLesson_Base" as Lesson_Base order 114
 participant "org.joda.time\nYearMonthDay" as YearMonthDay order 115
 participant "org.joda.time\nLocalDate" as LocalDate order 116
 participant "domain\nLessonInstance" as LessonInstance order 117
 JSPReadClassTimeTableByStudent -> ReadClassTimeTableByStudent: getConnection()
 JSPReadClassTimeTableByStudent <- ReadClassTimeTableByStudent: returnConnection()
 JSPReadClassTimeTableByStudent -> ReadClassTimeTableByStudent: executeAction()
 ReadClassTimeTableByStudent -> ReadClassTimeTableByStudent: run\n(Registration,SchoolClass,ExecutionCourse):List<InfoShowOccupation>
 ReadClassTimeTableByStudent -> ReadClassTimeTableByStudent: getOccupations\n(Registration,SchoolClass,ExecutionCourse,ExecutionSemester):List<InfoShowOccupation>
 ALT executionSemester != null
 	ReadClassTimeTableByStudent -> Registration: getAttendingExecutionCoursesFor(ExecutionSemester):List<ExecutionCourse>
 	LOOP for: getAssociatedAttendsSet()
 		OPT attends.isFor(executionSemester)
 			Registration -> Attends: getExecutionCourse():ExecutionCourse
 			Attends -> Attends: getDisciplinaExecucao():ExecutionCourse
 			Attends -> Attends: getExecutionCourse():ExecutionCourse
 		END
 	END
 ELSE else
 	ReadClassTimeTableByStudent -> Registration: getAttendingExecutionCoursesForCurrentExecutionPeriod\n():Set<ExecutionCourse>
 	LOOP for: getAssociatedAttendsSet()
 		OPT attends.getExecutionCourse().getExecutionPeriod().getState().equals(PeriodState.CURRENT)
 			Registration -> Attends: getExecutionCourse():ExecutionCourse
 			Attends -> Attends: getDisciplinaExecucao():ExecutionCourse
 			Attends -> Attends: getExecutionCourse():ExecutionCourse
 		END
 	END
 END
 LOOP for: schoolClass.getAssociatedShiftsSet()
 	OPT (executionCourse == null || executionCourse == shift.getDisciplinaExecucao())                    && attendingExecutionCourses.contains(shift.getDisciplinaExecucao())
 		ReadClassTimeTableByStudent -> InfoLessonInstanceAggregation: getAggregations\n(Shift):Collection<InfoLessonInstanceAggregation>
 		LOOP for: shift.getAssociatedLessonsSet()
 			LOOP for: lesson.getLessonInstancesSet()
 				InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: key(LessonInstance):String
 				InfoLessonInstanceAggregation -> LessonInstance_Base: getBeginDateTime():DateTime
 				InfoLessonInstanceAggregation -> DateTime: getDayOfWeek():int
 				InfoLessonInstanceAggregation -> LessonInstance_Base: getStartTime():HourMinuteSecond
 				InfoLessonInstanceAggregation -> HourMinuteSecond: toString(String):String
 				InfoLessonInstanceAggregation -> LessonInstance_Base: getEndTime():HourMinuteSecond
 				InfoLessonInstanceAggregation -> HourMinuteSecond: toString(String):String
 				ALT instance.getRoom() == null
 				ELSE else
 					InfoLessonInstanceAggregation -> LessonInstance_Base: getRoom():Space
 					InfoLessonInstanceAggregation -> Space: getExternalId():String
 				END
 				OPT !result.containsKey(key)
 					InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: InfoLessonInstanceAggregation(Shift,LessonInstance)
 					InfoLessonInstanceAggregation -> LessonInstance_Base: getBeginDateTime():DateTime
 					InfoLessonInstanceAggregation -> DateTime: getDayOfWeek():int
 					InfoLessonInstanceAggregation -> LessonInstance_Base: getStartTime():HourMinuteSecond
 					InfoLessonInstanceAggregation -> LessonInstance_Base: getEndTime():HourMinuteSecond
 					InfoLessonInstanceAggregation -> LessonInstance_Base: getRoom():Space
 				END
 				InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: register(YearMonthDay):void
 				InfoLessonInstanceAggregation -> LessonInstance: getDay():YearMonthDay
 			END
 			LOOP for: lesson.getAllLessonDatesWithoutInstanceDates()
 				InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: key(Lesson,YearMonthDay):String
 				InfoLessonInstanceAggregation -> YearMonthDay: toDateMidnight():DateMidnight
 				InfoLessonInstanceAggregation -> DateMidnight: getDayOfWeek():int
 				InfoLessonInstanceAggregation -> Lesson_Base: getBeginHourMinuteSecond():HourMinuteSecond
 				InfoLessonInstanceAggregation -> HourMinuteSecond: toString(String):String
 				InfoLessonInstanceAggregation -> Lesson_Base: getEndHourMinuteSecond():HourMinuteSecond
 				InfoLessonInstanceAggregation -> HourMinuteSecond: toString(String):String
 				ALT lesson.getSala() == null
 				ELSE else
 					InfoLessonInstanceAggregation -> Lesson_Base: getSala():Space
 					InfoLessonInstanceAggregation -> Space: getExternalId():String
 				END
 				OPT !result.containsKey(key)
 					InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: InfoLessonInstanceAggregation(Shift,Lesson,YearMonthDay)
 					InfoLessonInstanceAggregation -> YearMonthDay: toDateMidnight():DateMidnight
 					InfoLessonInstanceAggregation -> DateMidnight: getDayOfWeek():int
 					InfoLessonInstanceAggregation -> Lesson_Base: getBeginHourMinuteSecond():HourMinuteSecond
 					InfoLessonInstanceAggregation -> Lesson_Base: getEndHourMinuteSecond():HourMinuteSecond
 					InfoLessonInstanceAggregation -> Lesson_Base: getSala():Space
 				END
 				InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: register(YearMonthDay):void
 				InfoLessonInstanceAggregation -> YearMonthDay: getYear():int
 				InfoLessonInstanceAggregation -> YearMonthDay: getMonthOfYear():int
 				InfoLessonInstanceAggregation -> YearMonthDay: getDayOfMonth():int
 				InfoLessonInstanceAggregation -> LocalDate: LocalDate(int,int,int)
 			END
 		END
 	END
 END
 @enduml