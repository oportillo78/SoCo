@startuml
 participant "JSP\nJSPUploadOwnPhoto" as JSPUploadOwnPhoto order 0
 participant "services.fileManager\nUploadOwnPhoto" as UploadOwnPhoto order 1
 participant "predicate\nAccessControl" as AccessControl order 11
 participant "core.security\nAuthenticate" as Authenticate order 16
 participant "core.domain\nAuthenticationContext" as AuthenticationContext order 19
 participant "core.domain\nUser_Base" as User_Base order 20
 participant "domain\nPerson" as Person order 21
 participant "domain\nPhotograph" as Photograph order 30
 participant "domain\nPhotograph" as Photograph order 41
 participant "core.domain\nBennu" as Bennu order 66
 participant "pt.ist.fenixframework\nFenixFramework" as FenixFramework order 73
 participant "pt.ist.fenixframework\nDomainRoot" as DomainRoot order 74
 participant "org.joda.time\nDateTime" as DateTime order 75
 participant "domain.photograph\nPictureOriginal" as PictureOriginal order 76
 JSPUploadOwnPhoto -> UploadOwnPhoto: getConnection()
 JSPUploadOwnPhoto <- UploadOwnPhoto: returnConnection()
 JSPUploadOwnPhoto -> UploadOwnPhoto: executeAction()
 UploadOwnPhoto -> UploadOwnPhoto: run(byte[],ContentType):void
 UploadOwnPhoto -> AccessControl: getPerson():Person
 AccessControl -> Authenticate: getUser():User
 ALT ?
 ELSE else
 	Authenticate -> AuthenticationContext: getUser():User
 END
 ALT userView == null
 ELSE else
 	AccessControl -> User_Base: getPerson():Person
 END
 UploadOwnPhoto -> Person: setPersonalPhoto(Photograph):void
 OPT super.getPersonalPhoto() != null
 	Person -> Photograph: setPrevious(Photograph):void
 	OPT previous.getState() == PhotoState.PENDING
 		Photograph -> Photograph: setState(PhotoState):void
 	END
 	Photograph -> Photograph: setPrevious(Photograph):void
 	Person -> Person: getPersonalPhoto():Photograph
 END
 Person -> Person: setPersonalPhoto(Photograph):void
 OPT photo != null
 	Person -> Photograph: logCreate(Person):void
 	ALT getState() == PhotoState.PENDING
 		Photograph -> Photograph: logState(String):void
 	ELSE else
 		OPT getState() == PhotoState.APPROVED
 			ALT getPhotoType() == PhotoType.INSTITUTIONAL
 				Photograph -> Photograph: logState(String):void
 			ELSE else
 				Photograph -> Photograph: logState(String):void
 			END
 		END
 	END
 END
 UploadOwnPhoto -> Photograph: Photograph(PhotoType,ContentType,byte[])
 Photograph -> Photograph: Photograph()
 Photograph -> Photograph: Photograph_Base()
 Photograph -> Photograph: setRootDomainObject(Bennu):void
 Photograph -> Bennu: getInstance():Bennu
 OPT ?
 	Bennu -> Bennu: initialize():Bennu
 END
 Bennu -> FenixFramework: getDomainRoot():DomainRoot
 Bennu -> DomainRoot: getBennu():Bennu
 Photograph -> Photograph: setSubmission(DateTime):void
 Photograph -> DateTime: DateTime()
 Photograph -> Photograph: setPhotoType(PhotoType):void
 Photograph -> Photograph: setPhotoType(PhotoType):void
 ALT photoType == PhotoType.INSTITUTIONAL
 	Photograph -> Photograph: setState(PhotoState):void
 ELSE else
 	ALT photoType == PhotoType.USER
 		Photograph -> Photograph: setState(PhotoState):void
 	ELSE else
 		Photograph -> Photograph: setState(PhotoState):void
 	END
 END
 Photograph -> PictureOriginal: PictureOriginal(Photograph,byte[],ContentType)
 PictureOriginal -> PictureOriginal: PictureOriginal()
 PictureOriginal -> PictureOriginal: PictureOriginal_Base()
 PictureOriginal -> PictureOriginal: setPhotograph(Photograph):void
 PictureOriginal -> PictureOriginal: setPictureData(byte[]):void
 PictureOriginal -> PictureOriginal: setPictureFileFormat(ContentType):void
 PictureOriginal -> PictureOriginal: setupPictureMetadata(byte[]):void
 @enduml