@startuml
 participant "JSP\nJSPReadClassTimeTableByStudent" as JSPReadClassTimeTableByStudent order 0
 participant "services.enrollment.shift\nReadClassTimeTableByStudent" as ReadClassTimeTableByStudent order 1
 participant "dto\nInfoLessonInstanceAggregation" as InfoLessonInstanceAggregation order 17
 participant "org.joda.time\nLocalDate" as LocalDate order 92
 participant "org.joda.time\nDateMidnight" as DateMidnight order 93
 participant "org.joda.time\nYearMonthDay" as YearMonthDay order 94
 participant "org.joda.time\nDateMidnight" as DateMidnight order 95
 participant "domain\nLesson_Base" as Lesson_Base order 96
 participant "util\nHourMinuteSecond" as HourMinuteSecond order 97
 participant "util\nHourMinuteSecond" as HourMinuteSecond order 98
 participant "domain\nSpace" as Space order 99
 participant "domain\nLessonInstance_Base" as LessonInstance_Base order 100
 participant "org.joda.time\nDateTime" as DateTime order 101
 participant "domain\nLessonInstance_Base" as LessonInstance_Base order 102
 participant "org.joda.time\nDateTime" as DateTime order 103
 participant "util\nHourMinuteSecond" as HourMinuteSecond order 104
 participant "util\nHourMinuteSecond" as HourMinuteSecond order 105
 participant "domain\nSpace" as Space order 106
 participant "domain\nLessonInstance" as LessonInstance order 107
 participant "service.filter.enrollment\nClassEnrollmentAuthorizationFilter" as ClassEnrollmentAuthorizationFilter order 108
 participant "service.filter.enrollment.ClassEnrollmentAuthorizationFilter\nCurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan" as CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan order 175
 participant "domain\nEnrolmentPeriod" as EnrolmentPeriod order 176
 participant "domain\nEnrolmentPeriod" as EnrolmentPeriod order 177
 participant "domain\nEnrolmentPeriod" as EnrolmentPeriod order 178
 participant "service.filter.enrollment.ClassEnrollmentAuthorizationFilter\nOutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan" as OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan order 179
 participant "domain\nDegreeCurricularPlan" as DegreeCurricularPlan order 180
 participant "service.filter.enrollment.ClassEnrollmentAuthorizationFilter\nCurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan" as CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan order 181
 participant "domain\nEnrolmentPeriod" as EnrolmentPeriod order 182
 participant "domain\nEnrolmentPeriod" as EnrolmentPeriod order 183
 participant "domain\nEnrolmentPeriod" as EnrolmentPeriod order 184
 participant "service.filter.enrollment.ClassEnrollmentAuthorizationFilter\nOutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan" as OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan order 185
 participant "domain\nStudentCurricularPlan_Base" as StudentCurricularPlan_Base order 186
 participant "domain\nDegreeCurricularPlanEquivalencePlan_Base" as DegreeCurricularPlanEquivalencePlan_Base order 187
 participant "core.security\nAuthenticate" as Authenticate order 188
 participant "core.domain\nAuthenticationContext" as AuthenticationContext order 191
 participant "core.domain\nUser" as User order 192
 participant "domain.student\nRegistration" as Registration order 193
 participant "domain\nAttends" as Attends order 207
 participant "domain.student\nStudent" as Student order 216
 participant "service.filter.enrollment.ClassEnrollmentAuthorizationFilter\nClassEnrollmentCondition" as ClassEnrollmentCondition order 217
 participant "domain\nPerson" as Person order 218
 participant "domain\nExecutionSemester" as ExecutionSemester order 220
 participant "core.domain\nBennu" as Bennu order 225
 participant "pt.ist.fenixframework\nDomainRoot" as DomainRoot order 238
 participant "pt.ist.fenixframework\nFenixFramework" as FenixFramework order 239
 participant "pt.ist.fenixframework\nDomainRoot" as DomainRoot order 240
 participant "core.domain\nBennu" as Bennu order 241
 JSPReadClassTimeTableByStudent -> ReadClassTimeTableByStudent: getConnection()
 JSPReadClassTimeTableByStudent <- ReadClassTimeTableByStudent: returnConnection()
 JSPReadClassTimeTableByStudent -> ReadClassTimeTableByStudent: executeAction()
 ReadClassTimeTableByStudent -> ReadClassTimeTableByStudent: runReadClassTimeTableByStudent\n(Registration,SchoolClass,ExecutionCourse):List<InfoShowOccupation>
 ReadClassTimeTableByStudent -> ClassEnrollmentAuthorizationFilter: execute(Registration):void
 ClassEnrollmentAuthorizationFilter -> Authenticate: getUser():User
 ALT ?
 ELSE else
 	Authenticate -> AuthenticationContext: getUser():User
 END
 ClassEnrollmentAuthorizationFilter -> User: getPerson():Person
 OPT RoleType.RESOURCE_ALLOCATION_MANAGER.isMember(person.getUser())
 	ClassEnrollmentAuthorizationFilter -> Registration: getPerson():Person
 	Registration -> Registration: getStudent():Student
 	Registration -> Student: getPerson():Person
 END
 LOOP for: conditions
 	ClassEnrollmentAuthorizationFilter -> ClassEnrollmentCondition: verify(Registration):void
 END
 ClassEnrollmentAuthorizationFilter -> Person: getActiveStudentCurricularPlansSortedByDegreeTypeAndDegreeName\n():SortedSet<StudentCurricularPlan>
 LOOP for: getStudentsSet()
 	Person -> Registration: getActiveStudentCurricularPlan():StudentCurricularPlan
 	ALT isActive()
 		Registration -> Registration: getLastStudentCurricularPlan():StudentCurricularPlan
 		Registration -> Registration: getStudentCurricularPlansSet():Set<StudentCurricularPlan>
 	END
 END
 LOOP for: activeStudentCurricularPlans
 	ClassEnrollmentAuthorizationFilter -> ClassEnrollmentAuthorizationFilter: verify\n(StudentCurricularPlan,ExecutionSemester):FenixServiceException
 	ClassEnrollmentAuthorizationFilter -> StudentCurricularPlan_Base: getDegreeCurricularPlan():DegreeCurricularPlan
 	ClassEnrollmentAuthorizationFilter -> ClassEnrollmentAuthorizationFilter: verifyEnrolmentPeriod\n(DegreeCurricularPlan,ExecutionSemester,StudentCurricularPlan):FenixServiceException
 	ALT scp.getRegistration().getRegistrationProtocol().isMobilityAgreement()
 		ClassEnrollmentAuthorizationFilter -> DegreeCurricularPlan: getClassesEnrollmentPeriodMobility\n(ExecutionSemester):Optional<EnrolmentPeriod>
 	ELSE else
 		ClassEnrollmentAuthorizationFilter -> DegreeCurricularPlan: getClassesEnrollmentPeriod\n(ExecutionSemester):Optional<EnrolmentPeriod>
 	END
 	OPT !enrolmentPeriodInClasses.isPresent() || enrolmentPeriodInClasses.get().getStartDateDateTime() == null                || enrolmentPeriodInClasses.get().getEndDateDateTime() == null
 		ClassEnrollmentAuthorizationFilter -> CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan: CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan\n()
 	END
 	OPT !enrolmentPeriodInClasses.get().isValid()
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getStartDateDateTime():DateTime
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: toString(String):String
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getEndDateDateTime():DateTime
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: toString(String):String
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getExecutionPeriod():ExecutionSemester
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getExecutionYear():ExecutionYear
 		ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getName():String
 		ClassEnrollmentAuthorizationFilter -> OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan: OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan\n(String)
 	END
 	LOOP for: degreeCurricularPlan.getTargetEquivalencePlansSet()
 		ClassEnrollmentAuthorizationFilter -> DegreeCurricularPlanEquivalencePlan_Base: getDegreeCurricularPlan():DegreeCurricularPlan
 		ClassEnrollmentAuthorizationFilter -> ClassEnrollmentAuthorizationFilter: verifyEnrolmentPeriod\n(DegreeCurricularPlan,ExecutionSemester,StudentCurricularPlan):FenixServiceException
 		ALT scp.getRegistration().getRegistrationProtocol().isMobilityAgreement()
 			ClassEnrollmentAuthorizationFilter -> DegreeCurricularPlan: getClassesEnrollmentPeriodMobility\n(ExecutionSemester):Optional<EnrolmentPeriod>
 		ELSE else
 			ClassEnrollmentAuthorizationFilter -> DegreeCurricularPlan: getClassesEnrollmentPeriod\n(ExecutionSemester):Optional<EnrolmentPeriod>
 		END
 		OPT !enrolmentPeriodInClasses.isPresent() || enrolmentPeriodInClasses.get().getStartDateDateTime() == null                || enrolmentPeriodInClasses.get().getEndDateDateTime() == null
 			ClassEnrollmentAuthorizationFilter -> CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan: CurrentClassesEnrolmentPeriodUndefinedForDegreeCurricularPlan\n()
 		END
 		OPT !enrolmentPeriodInClasses.get().isValid()
 			ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getStartDateDateTime():DateTime
 			ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: toString(String):String
 			ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getEndDateDateTime():DateTime
 			ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: toString(String):String
 			ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getExecutionPeriod():ExecutionSemester
 			ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getExecutionYear():ExecutionYear
 			ClassEnrollmentAuthorizationFilter -> EnrolmentPeriod: getName():String
 			ClassEnrollmentAuthorizationFilter -> OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan: OutsideOfCurrentClassesEnrolmentPeriodForDegreeCurricularPlan\n(String)
 		END
 	END
 	ClassEnrollmentAuthorizationFilter -> ExecutionSemester: readActualExecutionSemester():ExecutionSemester
 	ExecutionSemester -> Bennu: getInstance():Bennu
 	OPT ?
 		Bennu -> Bennu: initialize():Bennu
 		OPT ?
 			Bennu -> Bennu: Bennu()
 		END
 		Bennu -> FenixFramework: getDomainRoot():DomainRoot
 		Bennu -> DomainRoot: getBennu():Bennu
 	END
 	Bennu -> FenixFramework: getDomainRoot():DomainRoot
 	Bennu -> DomainRoot: getBennu():Bennu
 	ExecutionSemester -> Bennu: getExecutionPeriodsSet():Set<ExecutionSemester>
 END
 ReadClassTimeTableByStudent -> ReadClassTimeTableByStudent: run\n(Registration,SchoolClass,ExecutionCourse):List<InfoShowOccupation>
 ReadClassTimeTableByStudent -> ReadClassTimeTableByStudent: getOccupations\n(Registration,SchoolClass,ExecutionCourse,ExecutionSemester):List<InfoShowOccupation>
 ALT executionSemester != null
 	ReadClassTimeTableByStudent -> Registration: getAttendingExecutionCoursesFor(ExecutionSemester):List<ExecutionCourse>
 	LOOP for: getAssociatedAttendsSet()
 		OPT attends.isFor(executionSemester)
 			Registration -> Attends: getExecutionCourse():ExecutionCourse
 			Attends -> Attends: getDisciplinaExecucao():ExecutionCourse
 			Attends -> Attends: getExecutionCourse():ExecutionCourse
 		END
 	END
 ELSE else
 	ReadClassTimeTableByStudent -> Registration: getAttendingExecutionCoursesForCurrentExecutionPeriod\n():Set<ExecutionCourse>
 	LOOP for: getAssociatedAttendsSet()
 		OPT attends.getExecutionCourse().getExecutionPeriod().getState().equals(PeriodState.CURRENT)
 			Registration -> Attends: getExecutionCourse():ExecutionCourse
 			Attends -> Attends: getDisciplinaExecucao():ExecutionCourse
 			Attends -> Attends: getExecutionCourse():ExecutionCourse
 		END
 	END
 END
 LOOP for: schoolClass.getAssociatedShiftsSet()
 	OPT (executionCourse == null || executionCourse == shift.getDisciplinaExecucao())                    && attendingExecutionCourses.contains(shift.getDisciplinaExecucao())
 		ReadClassTimeTableByStudent -> InfoLessonInstanceAggregation: getAggregations\n(Shift):Collection<InfoLessonInstanceAggregation>
 		LOOP for: shift.getAssociatedLessonsSet()
 			LOOP for: lesson.getLessonInstancesSet()
 				InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: key(LessonInstance):String
 				InfoLessonInstanceAggregation -> LessonInstance_Base: getBeginDateTime():DateTime
 				InfoLessonInstanceAggregation -> DateTime: getDayOfWeek():int
 				InfoLessonInstanceAggregation -> LessonInstance_Base: getStartTime():HourMinuteSecond
 				InfoLessonInstanceAggregation -> HourMinuteSecond: toString(String):String
 				InfoLessonInstanceAggregation -> LessonInstance_Base: getEndTime():HourMinuteSecond
 				InfoLessonInstanceAggregation -> HourMinuteSecond: toString(String):String
 				ALT instance.getRoom() == null
 				ELSE else
 					InfoLessonInstanceAggregation -> LessonInstance_Base: getRoom():Space
 					InfoLessonInstanceAggregation -> Space: getExternalId():String
 				END
 				OPT !result.containsKey(key)
 					InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: InfoLessonInstanceAggregation(Shift,LessonInstance)
 					InfoLessonInstanceAggregation -> LessonInstance_Base: getBeginDateTime():DateTime
 					InfoLessonInstanceAggregation -> DateTime: getDayOfWeek():int
 					InfoLessonInstanceAggregation -> LessonInstance_Base: getStartTime():HourMinuteSecond
 					InfoLessonInstanceAggregation -> LessonInstance_Base: getEndTime():HourMinuteSecond
 					InfoLessonInstanceAggregation -> LessonInstance_Base: getRoom():Space
 				END
 				InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: register(YearMonthDay):void
 				InfoLessonInstanceAggregation -> LessonInstance: getDay():YearMonthDay
 			END
 			LOOP for: lesson.getAllLessonDatesWithoutInstanceDates()
 				InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: key(Lesson,YearMonthDay):String
 				InfoLessonInstanceAggregation -> YearMonthDay: toDateMidnight():DateMidnight
 				InfoLessonInstanceAggregation -> DateMidnight: getDayOfWeek():int
 				InfoLessonInstanceAggregation -> Lesson_Base: getBeginHourMinuteSecond():HourMinuteSecond
 				InfoLessonInstanceAggregation -> HourMinuteSecond: toString(String):String
 				InfoLessonInstanceAggregation -> Lesson_Base: getEndHourMinuteSecond():HourMinuteSecond
 				InfoLessonInstanceAggregation -> HourMinuteSecond: toString(String):String
 				ALT lesson.getSala() == null
 				ELSE else
 					InfoLessonInstanceAggregation -> Lesson_Base: getSala():Space
 					InfoLessonInstanceAggregation -> Space: getExternalId():String
 				END
 				OPT !result.containsKey(key)
 					InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: InfoLessonInstanceAggregation(Shift,Lesson,YearMonthDay)
 					InfoLessonInstanceAggregation -> YearMonthDay: toDateMidnight():DateMidnight
 					InfoLessonInstanceAggregation -> DateMidnight: getDayOfWeek():int
 					InfoLessonInstanceAggregation -> Lesson_Base: getBeginHourMinuteSecond():HourMinuteSecond
 					InfoLessonInstanceAggregation -> Lesson_Base: getEndHourMinuteSecond():HourMinuteSecond
 					InfoLessonInstanceAggregation -> Lesson_Base: getSala():Space
 				END
 				InfoLessonInstanceAggregation -> InfoLessonInstanceAggregation: register(YearMonthDay):void
 				InfoLessonInstanceAggregation -> YearMonthDay: getYear():int
 				InfoLessonInstanceAggregation -> YearMonthDay: getMonthOfYear():int
 				InfoLessonInstanceAggregation -> YearMonthDay: getDayOfMonth():int
 				InfoLessonInstanceAggregation -> LocalDate: LocalDate(int,int,int)
 			END
 		END
 	END
 END
 @enduml