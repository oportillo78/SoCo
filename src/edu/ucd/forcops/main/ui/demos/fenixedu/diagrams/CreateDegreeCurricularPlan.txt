@startuml
 participant "JSP\nJSPCreateDegreeCurricularPlan" as JSPCreateDegreeCurricularPlan order 0
 participant "services.scientificCouncil.curricularPlans\nCreateDegreeCurricularPlan" as CreateDegreeCurricularPlan order 1
 participant "predicate\nAccessControlPredicate" as AccessControlPredicate order 19
 participant "domain\nPerson" as Person order 20
 participant "core.domain\nUser" as User order 25
 participant "predicate\nAccessControl" as AccessControl order 28
 participant "core.security\nAuthenticate" as Authenticate order 37
 participant "core.domain\nAuthenticationContext" as AuthenticationContext order 42
 participant "core.domain\nUser_Base" as User_Base order 43
 participant "pt.ist.fenixframework\nFenixFramework" as FenixFramework order 44
 participant "domain\nDegree" as Degree order 46
 participant "domain.person\nRoleType" as RoleType order 55
 participant "core.groups\nDynamicGroup" as DynamicGroup order 66
 participant "core.groups\nGroup" as Group order 67
 participant "core.groups.DynamicGroup\nMutator" as Mutator order 68
 participant "domain\nPerson_Base" as Person_Base order 69
 participant "domain.curricularPeriod\nCurricularPeriod" as CurricularPeriod order 71
 participant "core.domain\nBennu" as Bennu order 82
 participant "pt.ist.fenixframework\nDomainRoot" as DomainRoot order 88
 participant "domain\nDegreeCurricularPlan" as DegreeCurricularPlan order 89
 participant "core.domain\nUser" as User order 109
 participant "domain.accounting.serviceAgreementTemplates\nDegreeCurricularPlanServiceAgreementTemplate" as DegreeCurricularPlanServiceAgreementTemplate order 110
 JSPCreateDegreeCurricularPlan -> CreateDegreeCurricularPlan: getConnection()
 JSPCreateDegreeCurricularPlan <- CreateDegreeCurricularPlan: returnConnection()
 JSPCreateDegreeCurricularPlan -> CreateDegreeCurricularPlan: executeAction()
 CreateDegreeCurricularPlan -> CreateDegreeCurricularPlan: run\n(String,String,GradeScale,AcademicPeriod):void
 CreateDegreeCurricularPlan -> CreateDegreeCurricularPlan: check(AccessControlPredicate<?>):void
 CreateDegreeCurricularPlan -> AccessControl: getPerson():Person
 AccessControl -> Authenticate: getUser():User
 ALT ?
 ELSE else
 	Authenticate -> AuthenticationContext: getUser():User
 END
 ALT userView == null
 ELSE else
 	AccessControl -> User_Base: getPerson():Person
 END
 CreateDegreeCurricularPlan -> AccessControlPredicate: evaluate(E):boolean
 OPT !result
 	ALT requester == null
 	ELSE else
 		CreateDegreeCurricularPlan -> Person: getUsername():String
 		Person -> Person: getUser():User
 		ALT user == null
 		ELSE else
 			Person -> User: getUsername():String
 			User -> User: getUsername():String
 		END
 	END
 END
 CreateDegreeCurricularPlan -> AccessControl: getPerson():Person
 AccessControl -> Authenticate: getUser():User
 ALT ?
 ELSE else
 	Authenticate -> AuthenticationContext: getUser():User
 END
 ALT userView == null
 ELSE else
 	AccessControl -> User_Base: getPerson():Person
 END
 CreateDegreeCurricularPlan -> FenixFramework: getDomainObject(String):T
 CreateDegreeCurricularPlan -> Degree: createDegreeCurricularPlan\n(String,GradeScale,Person,AcademicPeriod):DegreeCurricularPlan
 OPT !RoleType.BOLONHA_MANAGER.isMember(creator.getUser())
 	Degree -> RoleType: grant(RoleType,User):void
 	RoleType -> RoleType: actualGroup():Group
 	ALT group instanceof DynamicGroup
 		RoleType -> DynamicGroup: mutator():Mutator
 		RoleType -> DynamicGroup: underlyingGroup():Group
 		RoleType -> Group: grant(User):Group
 		RoleType -> Mutator: changeGroup(Group):DynamicGroup
 	END
 	Degree -> Person_Base: getUser():User
 END
 Degree -> CurricularPeriod: CurricularPeriod(AcademicPeriod)
 CurricularPeriod -> CurricularPeriod: CurricularPeriod_Base()
 CurricularPeriod -> CurricularPeriod: AbstractDomainObject()
 CurricularPeriod -> CurricularPeriod: setRootDomainObject(Bennu):void
 CurricularPeriod -> Bennu: getInstance():Bennu
 OPT ?
 	Bennu -> Bennu: initialize():Bennu
 END
 Bennu -> FenixFramework: getDomainRoot():DomainRoot
 Bennu -> DomainRoot: getBennu():Bennu
 CurricularPeriod -> CurricularPeriod: setAcademicPeriod(AcademicPeriod):void
 Degree -> DegreeCurricularPlan: DegreeCurricularPlan\n(Degree,String,GradeScale,Person,CurricularPeriod)
 DegreeCurricularPlan -> DegreeCurricularPlan: DegreeCurricularPlan(Degree,String,GradeScale)
 DegreeCurricularPlan -> DegreeCurricularPlan: createDefaultCourseGroups():void
 DegreeCurricularPlan -> DegreeCurricularPlan: setCurricularPlanMembersGroup(Group):void
 DegreeCurricularPlan -> Person_Base: getUser():User
 DegreeCurricularPlan -> User: groupOf():Group
 DegreeCurricularPlan -> DegreeCurricularPlan: setDegreeStructure(CurricularPeriod):void
 DegreeCurricularPlan -> DegreeCurricularPlan: setState(DegreeCurricularPlanState):void
 DegreeCurricularPlan -> DegreeCurricularPlan: newStructureFieldsChange(CurricularStage,ExecutionYear):void
 DegreeCurricularPlan -> DegreeCurricularPlan: createDefaultCurricularRules():void
 DegreeCurricularPlan -> DegreeCurricularPlanServiceAgreementTemplate: DegreeCurricularPlanServiceAgreementTemplate\n(DegreeCurricularPlan)
 DegreeCurricularPlanServiceAgreementTemplate -> DegreeCurricularPlanServiceAgreementTemplate: DegreeCurricularPlanServiceAgreementTemplate\n()
 DegreeCurricularPlanServiceAgreementTemplate -> DegreeCurricularPlanServiceAgreementTemplate: init(DegreeCurricularPlan):void
 DegreeCurricularPlanServiceAgreementTemplate -> DegreeCurricularPlanServiceAgreementTemplate: checkParameters(DegreeCurricularPlan):void
 DegreeCurricularPlanServiceAgreementTemplate -> DegreeCurricularPlanServiceAgreementTemplate: checkRulesToCreate(DegreeCurricularPlan):void
 DegreeCurricularPlanServiceAgreementTemplate -> DegreeCurricularPlanServiceAgreementTemplate: setDegreeCurricularPlan(DegreeCurricularPlan):void
 @enduml