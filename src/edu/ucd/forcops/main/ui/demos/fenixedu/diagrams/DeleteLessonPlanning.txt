@startuml
 participant "JSP\nJSPDeleteLessonPlanning" as JSPDeleteLessonPlanning order 0
 participant "services.teacher\nDeleteLessonPlanning" as DeleteLessonPlanning order 1
 participant "domain\nLessonPlanning" as LessonPlanning order 13
 participant "domain\nCurricularManagementLog" as CurricularManagementLog order 54
 participant "i18n\nLocalizedString" as LocalizedString order 60
 participant "domain\nShiftType" as ShiftType order 61
 participant "domain\nExecutionCourse" as ExecutionCourse order 62
 participant "domain\nExecutionCourse" as ExecutionCourse order 63
 participant "domain\nExecutionCourse" as ExecutionCourse order 64
 participant "domain\nExecutionCourse" as ExecutionCourse order 65
 participant "domain\nLessonPlanning" as LessonPlanning order 70
 participant "i18n\nLocalizedString" as LocalizedString order 96
 participant "domain\nShiftType" as ShiftType order 97
 participant "domain\nExecutionCourse" as ExecutionCourse order 98
 participant "domain\nExecutionCourse" as ExecutionCourse order 99
 participant "service.filter\nExecutionCourseLecturingTeacherAuthorizationFilter" as ExecutionCourseLecturingTeacherAuthorizationFilter order 100
 participant "pt.ist.fenixframework\nFenixFramework" as FenixFramework order 115
 participant "dto\nInfoExecutionCourse" as InfoExecutionCourse order 116
 participant "dto\nSummariesManagementBean" as SummariesManagementBean order 117
 participant "core.security\nAuthenticate" as Authenticate order 118
 participant "core.domain\nAuthenticationContext" as AuthenticationContext order 121
 JSPDeleteLessonPlanning -> DeleteLessonPlanning: getConnection()
 JSPDeleteLessonPlanning <- DeleteLessonPlanning: returnConnection()
 JSPDeleteLessonPlanning -> DeleteLessonPlanning: executeAction()
 DeleteLessonPlanning -> DeleteLessonPlanning: runDeleteLessonPlanning\n(String,LessonPlanning,ExecutionCourse,ShiftType):void
 DeleteLessonPlanning -> ExecutionCourseLecturingTeacherAuthorizationFilter: execute(String):void
 ExecutionCourseLecturingTeacherAuthorizationFilter -> ExecutionCourseLecturingTeacherAuthorizationFilter: execute(ExecutionCourse):void
 ExecutionCourseLecturingTeacherAuthorizationFilter -> Authenticate: getUser():User
 ALT ?
 ELSE else
 	Authenticate -> AuthenticationContext: getUser():User
 END
 ExecutionCourseLecturingTeacherAuthorizationFilter -> ExecutionCourseLecturingTeacherAuthorizationFilter: getExecutionCourse(Object):ExecutionCourse
 ALT argument == null
 ELSE else
 	ALT argument instanceof ExecutionCourse
 	ELSE else
 		ALT argument instanceof InfoExecutionCourse
 			ExecutionCourseLecturingTeacherAuthorizationFilter -> FenixFramework: getDomainObject(String):T
 			ExecutionCourseLecturingTeacherAuthorizationFilter -> InfoExecutionCourse: getExternalId():String
 		ELSE else
 			ALT argument instanceof String
 				ExecutionCourseLecturingTeacherAuthorizationFilter -> FenixFramework: getDomainObject(String):T
 			ELSE else
 				ALT argument instanceof SummariesManagementBean
 					ExecutionCourseLecturingTeacherAuthorizationFilter -> SummariesManagementBean: getExecutionCourse():ExecutionCourse
 				END
 			END
 		END
 	END
 END
 DeleteLessonPlanning -> DeleteLessonPlanning: run\n(String,LessonPlanning,ExecutionCourse,ShiftType):void
 ALT lessonPlanning != null
 	DeleteLessonPlanning -> LessonPlanning: delete():void
 	LessonPlanning -> LessonPlanning: reOrderLessonPlannings():void
 	LessonPlanning -> LessonPlanning: getExecutionCourse():ExecutionCourse
 	LessonPlanning -> LessonPlanning: getLessonType():ShiftType
 	LessonPlanning -> ExecutionCourse: getLessonPlanningsOrderedByOrder(ShiftType):List<LessonPlanning>
 	OPT !lessonPlannings.isEmpty() && !lessonPlannings.get(lessonPlannings.size() - 1).equals(this)
 		LOOP for:i < lessonPlannings.size()
 			LessonPlanning -> LessonPlanning: setOrderOfPlanning(Integer):void
 			LessonPlanning -> LessonPlanning: getOrderOfPlanning():Integer
 		END
 	END
 	LessonPlanning -> LessonPlanning: deleteWithoutReOrder():void
 	LessonPlanning -> CurricularManagementLog: createLog\n(ExecutionCourse,String,String,String[]):CurricularManagementLog
 	LessonPlanning -> LessonPlanning: getExecutionCourse():ExecutionCourse
 	LessonPlanning -> LessonPlanning: getTitle():LocalizedString
 	LessonPlanning -> LocalizedString: getContent():String
 	LessonPlanning -> LessonPlanning: getLessonType():ShiftType
 	LessonPlanning -> ShiftType: getFullNameTipoAula():String
 	LessonPlanning -> LessonPlanning: getExecutionCourse():ExecutionCourse
 	LessonPlanning -> ExecutionCourse: getNome():String
 	LessonPlanning -> LessonPlanning: getExecutionCourse():ExecutionCourse
 	LessonPlanning -> ExecutionCourse: getDegreePresentationString():String
 	LessonPlanning -> LessonPlanning: setExecutionCourse(ExecutionCourse):void
 	LessonPlanning -> LessonPlanning: setRootDomainObject(Bennu):void
 	LessonPlanning -> LessonPlanning: deleteDomainObject():void
 ELSE else
 	OPT executionCourse != null && shiftType != null
 		DeleteLessonPlanning -> ExecutionCourse: deleteLessonPlanningsByLessonType(ShiftType):void
 		ExecutionCourse -> ExecutionCourse: getLessonPlanningsOrderedByOrder(ShiftType):List<LessonPlanning>
 		LOOP for: lessonPlanningsOrderedByOrder
 			ExecutionCourse -> LessonPlanning: deleteWithoutReOrder():void
 			LessonPlanning -> CurricularManagementLog: createLog\n(ExecutionCourse,String,String,String[]):CurricularManagementLog
 			CurricularManagementLog -> CurricularManagementLog: generateLabelDescription(String,String,String[]):String
 			CurricularManagementLog -> CurricularManagementLog: createCurricularManagementLog\n(ExecutionCourse,String):CurricularManagementLog
 			LessonPlanning -> LessonPlanning: getExecutionCourse():ExecutionCourse
 			LessonPlanning -> LessonPlanning: getTitle():LocalizedString
 			LessonPlanning -> LocalizedString: getContent():String
 			LessonPlanning -> LessonPlanning: getLessonType():ShiftType
 			LessonPlanning -> ShiftType: getFullNameTipoAula():String
 			LessonPlanning -> LessonPlanning: getExecutionCourse():ExecutionCourse
 			LessonPlanning -> ExecutionCourse: getNome():String
 			LessonPlanning -> LessonPlanning: getExecutionCourse():ExecutionCourse
 			LessonPlanning -> ExecutionCourse: getDegreePresentationString():String
 			LessonPlanning -> LessonPlanning: setExecutionCourse(ExecutionCourse):void
 			LessonPlanning -> LessonPlanning: setRootDomainObject(Bennu):void
 			LessonPlanning -> LessonPlanning: deleteDomainObject():void
 		END
 	END
 END
 @enduml